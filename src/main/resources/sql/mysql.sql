-- 테이블 생성
CREATE TABLE FISH_INFO
(
    ID        INTEGER NOT NULL,
    FISH_TYPE INTEGER NOT NULL,
    LENGTH    FLOAT,
    TIME      DATE    NOT NULL
);

CREATE TABLE DEVELOPER_INFOS
(
    ID         VARCHAR(20) UNIQUE,
    FIRST_NAME VARCHAR(20),
    LAST_NAME  VARCHAR(20),
    EMAIL      VARCHAR(20) UNIQUE,
    SKILL_1    VARCHAR(20),
    SKILL_2    VARCHAR(20),
    SKILL_3    VARCHAR(20)
);

CREATE TABLE USED_GOODS_BOARD
(
    BOARD_ID     VARCHAR(5)    NOT NULL,
    WRITER_ID    VARCHAR(50)   NOT NULL,
    TITLE        VARCHAR(100)  NOT NULL,
    CONTENTS     VARCHAR(1000) NOT NULL,
    PRICE        INT           NOT NULL,
    CREATED_DATE DATE          NOT NULL,
    STATUS       VARCHAR(10)   NOT NULL,
    VIEWS        INT           NOT NULL
);

CREATE TABLE USED_GOODS_REPLY
(
    REPLY_ID     VARCHAR(10)   NOT NULL,
    BOARD_ID     VARCHAR(5)    NOT NULL,
    WRITER_ID    VARCHAR(50)   NOT NULL,
    CONTENTS     VARCHAR(1000) NULL,
    CREATED_DATE DATE          NOT NULL
);

CREATE TABLE CAR_RENTAL_COMPANY_CAR
(
    CAR_ID    INTEGER      NOT NULL,
    CAR_TYPE  VARCHAR(255) NOT NULL,
    DAILY_FEE INTEGER      NOT NULL,
    OPTIONS   VARCHAR(255) NOT NULL
);

CREATE TABLE CAR_RENTAL_COMPANY_RENTAL_HISTORY
(
    HISTORY_ID INTEGER NOT NULL,
    CAR_ID     INTEGER NOT NULL,
    START_DATE DATE    NOT NULL,
    END_DATE   DATE    NOT NULL
);

CREATE TABLE BOOK
(
    BOOK_ID        INTEGER     NOT NULL,
    CATEGORY       VARCHAR(20) NOT NULL,
    AUTHOR_ID      INTEGER     NOT NULL,
    PRICE          INTEGER     NOT NULL,
    PUBLISHED_DATE DATE        NOT NULL
);

CREATE TABLE FISH_NAME_INFO
(
    FISH_TYPE INTEGER     NOT NULL,
    FISH_NAME VARCHAR(30) NOT NULL
);

CREATE TABLE SUBWAY_DISTANCE
(
    LINE           VARCHAR(10)    NOT NULL,
    NO             INT            NOT NULL,
    ROUTE          VARCHAR(50)    NOT NULL,
    STATION_NAME   VARCHAR(100)   NOT NULL,
    D_BETWEEN_DIST DECIMAL(10, 1) NOT NULL,
    D_CUMULATIVE   DECIMAL(10, 1) NOT NULL
);

CREATE TABLE AIR_POLLUTION
(
    LOCATION1 VARCHAR(30) NOT NULL,
    LOCATION2 VARCHAR(30) NOT NULL,
    YM        DATE        NOT NULL,
    PM_VAL1   INT         NOT NULL,
    PM_VAL2   INT         NOT NULL
);

CREATE TABLE HR_DEPARTMENT
(
    DEPT_ID      VARCHAR(20) NOT NULL,
    DEPT_NAME_KR VARCHAR(20) NOT NULL,
    DEPT_NAME_EN VARCHAR(20) NOT NULL,
    LOCATION     VARCHAR(20) NOT NULL
);

CREATE TABLE HR_EMPLOYEES
(
    EMP_NO    VARCHAR(20) NOT NULL,
    EMP_NAME  VARCHAR(20) NOT NULL,
    DEPT_ID   VARCHAR(20) NOT NULL,
    POSITION  VARCHAR(20) NOT NULL,
    EMAIL     VARCHAR(20) NOT NULL,
    COMP_TEL  VARCHAR(20) NOT NULL,
    HIRE_DATE DATE        NOT NULL,
    SAL       INT         NOT NULL
);

CREATE TABLE HR_GRADE
(
    EMP_NO    VARCHAR(30) NOT NULL,
    YEAR      INT         NOT NULL,
    HALF_YEAR INT         NOT NULL,
    SCORE     INT         NOT NULL
);

CREATE TABLE ANIMAL_INS
(
    ANIMAL_ID        VARCHAR(15) NOT NULL,
    ANIMAL_TYPE      VARCHAR(15) NOT NULL,
    DATETIME         DATETIME    NOT NULL,
    INTAKE_CONDITION VARCHAR(15) NOT NULL,
    NAME             VARCHAR(15) NOT NULL,
    SEX_UPON_INTAKE  VARCHAR(15) NOT NULL
);

CREATE TABLE ANIMAL_OUTS
(
    ANIMAL_ID        VARCHAR(30) NOT NULL,
    ANIMAL_TYPE      VARCHAR(30) NOT NULL,
    DATETIME         DATETIME    NOT NULL,
    NAME             VARCHAR(30),
    SEX_UPON_OUTCOME VARCHAR(30) NOT NULL
);

CREATE TABLE CART_PRODUCTS
(
    ID      INT          NOT NULL,
    CART_ID INT          NOT NULL,
    NAME    VARCHAR(180) NOT NULL,
    PRICE   INT          NOT NULL
);

# 특정 조건을 만족하는 물고기별 수와 최대 길이 구하기
SELECT COUNT(*) AS FISH_COUNT
     , MAX(LENGTH) AS MAX_LENGTH
     , FISH_TYPE
FROM FISH_INFO AS INFO
GROUP BY FISH_TYPE
HAVING AVG(IF(LENGTH < 10 OR LENGTH IS NULL, 10, LENGTH)) >= 33
ORDER BY FISH_TYPE;

-- 우유와 요거트가 담긴 장바구니
WITH SUB AS
         (SELECT CART_ID, NAME
          FROM CART_PRODUCTS
          WHERE NAME = 'Milk'
             OR NAME = 'Yogurt'
          GROUP BY CART_ID, NAME)
SELECT CART_ID
FROM SUB
GROUP BY CART_ID
HAVING COUNT(*) >= 2
ORDER BY CART_ID;

# 최댓값 구하기
SELECT DATETIME
FROM ANIMAL_INS
ORDER BY DATETIME DESC
LIMIT 1;

# DATETIME에서 DATE로 형 변환
SELECT ANIMAL_ID
     , NAME
     , DATE_FORMAT(DATETIME, '%Y-%m-%d')
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

# 입양 시각 구하기(2)
WITH RECURSIVE GET_HOUR (HOUR)
                   AS (SELECT 0
                       UNION ALL
                       SELECT HOUR + 1
                       FROM GET_HOUR
                       WHERE HOUR < 23)
SELECT G.HOUR, IFNULL(COUNT(ANIMAL_ID), '0')
FROM GET_HOUR G
     LEFT OUTER JOIN ANIMAL_OUTS A ON G.HOUR = HOUR(DATETIME)
GROUP BY 1
ORDER BY 1;

# 자동차 대여 기록에서 장기/단기 대여 구분하기
SELECT HISTORY_ID
     , CAR_ID
     , DATE_FORMAT(START_DATE, '%Y-%m-%d') AS START_DATE
     , DATE_FORMAT(END_DATE, '%Y-%m-%d') AS END_DATE
     , IF(DATEDIFF(END_DATE, START_DATE) >= 29, '장기 대여', '단기 대여') AS RENT_TYPE
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
WHERE YEAR(START_DATE) = '2022'
  AND MONTH(START_DATE) = '09'
ORDER BY HISTORY_ID DESC;

# 평균 일일 대여 요금 구하기
SELECT ROUND(AVG(DAILY_FEE), 0) AS AVERAGE_FEE
FROM CAR_RENTAL_COMPANY_CAR
WHERE CAR_TYPE = 'SUV';

# 조건에 맞는 도서 리스트 출력하기
SELECT BOOK_ID
     , DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK
WHERE YEAR(PUBLISHED_DATE) = '2021'
  AND CATEGORY = '인문'
ORDER BY PUBLISHED_DATE;

# 연도 별 평균 미세먼지 농도 조회하기
SELECT YEAR(YM) AS YEAR, ROUND(AVG(PM_VAL1), 2) AS 'PM10', ROUND(AVG(PM_VAL2), 2) AS 'PM2.5'
FROM AIR_POLLUTION
WHERE LOCATION2 = '수원'
GROUP BY YEAR
ORDER BY YEAR;

# 부서별 평균 연봉 조회 하기
SELECT EMP.DEPT_ID, DEPT_NAME_EN, ROUND(AVG(SAL), 0) AS AVG_SAL
FROM HR_DEPARTMENT AS DEPART
     INNER JOIN HR_EMPLOYEES AS EMP
                ON DEPART.DEPT_ID = EMP.DEPT_ID
GROUP BY EMP.DEPT_ID, DEPART.DEPT_NAME_EN
ORDER BY AVG_SAL DESC;

# 연간 평가점수에 해당하는 평가 등급 및 성과금 조회하기
WITH SUB AS (SELECT EMP_NO
                  , IF(AVG(SCORE) >= 96, 'S',
                       IF(AVG(SCORE) >= 90, 'A',
                          IF(AVG(SCORE) >= 80, 'B', 'C'))) AS GRADE
             FROM HR_GRADE
             GROUP BY EMP_NO)
SELECT SUB.EMP_NO
     , EMP.EMP_NAME
     , SUB.GRADE
     , ROUND(IF(SUB.GRADE = 'S', SAL * 0.2,
                IF(SUB.GRADE = 'A', SAL * 0.15,
                   IF(SUB.GRADE = 'B', SAL * 0.1, 0)))) AS BONUS
FROM SUB
     INNER JOIN HR_EMPLOYEES AS EMP
                ON SUB.EMP_NO = EMP.EMP_NO
ORDER BY SUB.EMP_NO;

# 조건에 맞는 사원 정보 조회하기
WITH SUB AS (SELECT EMP_NO, SUM(SCORE) AS SCORE
             FROM HR_GRADE
             GROUP BY EMP_NO
             ORDER BY SCORE DESC
             LIMIT 1)
SELECT SCORE, EMP.EMP_NO, EMP.EMP_NAME, EMP.POSITION, EMP.EMAIL
FROM SUB
     INNER JOIN HR_EMPLOYEES AS EMP
                ON SUB.EMP_NO = EMP.EMP_NO;

# Python 개발자 찾기
SELECT ID
     , EMAIL
     , FIRST_NAME
     , LAST_NAME
FROM DEVELOPER_INFOS
WHERE 1 = 1
    AND SKILL_1 = 'Python'
   OR SKILL_2 = 'Python'
   OR SKILL_3 = 'Python'
ORDER BY ID;

# 조건에 부합하는 중고거래 댓글 조회하기
SELECT B.TITLE
     , B.BOARD_ID
     , R.REPLY_ID
     , R.WRITER_ID
     , R.CONTENTS
     , DATE_FORMAT(R.CREATED_DATE, '%Y-%m-%d') AS CREATED_DATE
FROM USED_GOODS_BOARD AS B
     INNER JOIN USED_GOODS_REPLY AS R
                ON B.BOARD_ID = R.BOARD_ID
WHERE YEAR(B.CREATED_DATE) = '2022'
  AND MONTH(B.CREATED_DATE) = '10'
ORDER BY R.CREATED_DATE , B.TITLE;

# 특정 옵션이 포함된 자동차 리스트 구하기
SELECT *
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%네비게이션%'
ORDER BY CAR_ID DESC;

# 노선별 평균 역 사이 거리 조회하기
SELECT ROUTE
     , CONCAT(ROUND(SUM(D_BETWEEN_DIST), 1), 'km') AS TOTAL_DISTANCE
     , CONCAT(ROUND(AVG(D_BETWEEN_DIST), 2), 'km') AS AVERAGE_DISTANCE
FROM SUBWAY_DISTANCE
GROUP BY ROUTE
ORDER BY SUM(D_BETWEEN_DIST) DESC;

# 물고기 종류 별 잡은 수 구하기
SELECT COUNT(*) AS FISH_COUNT, NAME.FISH_NAME
FROM FISH_INFO AS INFO
     INNER JOIN FISH_NAME_INFO AS NAME
                ON INFO.FISH_TYPE = NAME.FISH_TYPE
GROUP BY NAME.FISH_NAME
ORDER BY COUNT(*) DESC;

# 잔챙이 잡은 수 구하기
SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO
WHERE LENGTH IS NULL;

# 잡은 물고기의 평균 길이 구하기
SELECT ROUND(AVG(CASE WHEN LENGTH > 10 THEN LENGTH ELSE 10 END), 2) AS AVERAGE_LENGTH
FROM FISH_INFO;

# 월별 잡은 물고기 수 구하기
SELECT COUNT(*) AS FISH_COUNT
     , MONTH(TIME) AS MONTH
FROM FISH_INFO
GROUP BY MONTH(TIME)
ORDER BY MONTH(TIME);

# 물고기 종류 별 대어 찾기
WITH SUB AS (SELECT FISH_TYPE, MAX(LENGTH) AS LENGTH
             FROM FISH_INFO
             GROUP BY FISH_TYPE)
SELECT ID, FISH_NAME, S.LENGTH
FROM SUB AS S
     INNER JOIN FISH_NAME_INFO AS N
                ON S.FISH_TYPE = N.FISH_TYPE
     INNER JOIN FISH_INFO AS I
                ON I.FISH_TYPE = S.FISH_TYPE AND I.LENGTH = S.LENGTH
ORDER BY I.ID;

# 잡은 물고기 중 가장 큰 물고기의 길이 구하기
SELECT CONCAT(LENGTH, 'cm')AS MAX_LENGTH
FROM FISH_INFO
ORDER BY LENGTH DESC
LIMIT 1;

# 한 해에 잡은 물고기 수 구하기
SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO
WHERE YEAR(TIME) = '2021';

# 가장 큰 물고기 10마리 구하기
SELECT ID, LENGTH
FROM FISH_INFO
ORDER BY LENGTH DESC, ID
LIMIT 10;

# 특정 물고기를 잡은 총 수 구하기
SELECT COUNT(*) AS FISH_COUNT
FROM FISH_INFO AS INFO
     INNER JOIN FISH_NAME_INFO AS NAME
                ON INFO.FISH_TYPE = NAME.FISH_TYPE
WHERE NAME.FISH_NAME = 'BASS' OR NAME.FISH_NAME = 'SNAPPER'

# 특정 조건을 만족하는 물고기별 수와 최대 길이 구하기
SELECT COUNT(*) AS FISH_COUNT
     , MAX(LENGTH) AS MAX_LENGTH
     , FISH_TYPE
FROM FISH_INFO AS INFO
GROUP BY FISH_TYPE
HAVING AVG(IF(LENGTH < 10 OR LENGTH IS NULL, 10 , LENGTH)) >= 33
ORDER BY FISH_TYPE;